#include <ntddk.h>



void ProcessNotifyCallBackRoutine // 프로세스가 실행 또는 종료 될때 
(
	IN HANDLE ParentId,
	IN HANDLE Processid,
	IN BOOLEAN Create
)
{
	UNREFERENCED_PARAMETER(ParentId);

	switch (Create)
	{
		case TRUE: //process execute
			DbgPrintEx(DPFLTR_IHVDRIVER_ID, 0, "(ID:0x%X) Process is creating\n", Processid);
			break;
		case FALSE:
			DbgPrintEx(DPFLTR_IHVDRIVER_ID, 0, "(ID:0x%X) Process is deleting\n", Processid);
			break;
	}
}

void LoadImageCallBackCallBackRoutine //임의의 드라이버 또는 DLL 파일이 메모리에 적재 될때 
(
	IN PUNICODE_STRING FullImageName, IN HANDLE ProcessId,
	IN PIMAGE_INFO ImageInfo
)
{
	WCHAR* pwsName = NULL;
	if (FullImageName == NULL) //NULL 주소 참조 예외처리
	{
		goto exit;
	}

	pwsName = (WCHAR*)ExAllocatePool(NonPagedPool, FullImageName->Length + sizeof(WCHAR));
	//문자열을 담을 메모리를 할당
	memcpy(pwsName, FullImageName->Buffer, FullImageName->Length);//문자열 복사
	pwsName[FullImageName->Length / sizeof(WCHAR)] = 0; //NULL 문자열을 만듭니다.
	DbgPrintEx(DPFLTR_IHVDRIVER_ID, 0, "(ID:0x%X) Process, (%ws) is loading\n", ProcessId, pwsName);

	if (ImageInfo->SystemModeImage) //드라이버가 메모리에 상주하는 경우
	{
		DbgPrintEx(DPFLTR_IHVDRIVER_ID, 0, "(ID:0x%X) Process, Driver:(%ws) is loading\n", ProcessId, pwsName);
	}
	else //DLL 파일이 메모리에 상주하는 경우
		DbgPrintEx(DPFLTR_IHVDRIVER_ID, 0, "(ID:0x%X) Process, DLL:(%ws) is loading\n", ProcessId, pwsName);

exit:
	if (pwsName) //사용이 끝난 메모리 해제  - ExAllocatePool - ExFreePool
	{
		ExFreePool(pwsName);
	}

}

void MyDriverUnload //드라이버가 메모리에서 해제될때 
(
	IN PDRIVER_OBJECT DriverObject
)
{
	UNREFERENCED_PARAMETER(DriverObject);

	DbgPrintEx(DPFLTR_IHVDRIVER_ID, 0, "");

	PsSetCreateProcessNotifyRoutine(ProcessNotifyCallBackRoutine, TRUE);
	PsRemoveLoadImageNotifyRoutine(LoadImageCallBackCallBackRoutine);
	//사용한 콜백함수 해제
}

NTSTATUS DriverEntry
(
	IN PDRIVER_OBJECT DriverObject,
	IN PUNICODE_STRING RegistryPath
)
{
	UNREFERENCED_PARAMETER(DriverObject);
	UNREFERENCED_PARAMETER(RegistryPath);

	DbgPrintEx(DPFLTR_IHVDRIVER_ID, 0, "LOADVIEW Driver Loading...\n");
	DriverObject->DriverUnload = MyDriverUnload;
	//드라이버가 메모리에서 해제될때 호출될 함수 등록

	PsSetCreateProcessNotifyRoutine(ProcessNotifyCallBackRoutine, FALSE);
	//드라이버는 이함수를 호출할때, "NotifyRoutine" 파라미터에 드라이버의 특정 루틴 주소(콜백함수)를 입력합니다.
	//2번째 파라미터의 값이 TRUE이면 콜백루틴을 해제, FLASE면 콜백루틴을 설정.


	PsSetLoadImageNotifyRoutine(LoadImageCallBackCallBackRoutine); 
	//드라이버는 이 함수를 호출할 때, "NotifyRoutine" 파라미터에 드라이버의 특정 루틴 주소(콜백 루틴)를 입력.
	//드라이버가 등록하는 콜백루틴은 다른 드라이버, 동적 라이브러리가 메모리에 상주할 때 마다 호출됩니다.
	//콜백 함수를 해제할때 사용하는 함수
	return STATUS_SUCCESS;


}
